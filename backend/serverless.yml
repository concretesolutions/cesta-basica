# For full config options, check the docs:
#    docs.serverless.com

service: cesta-basica-sp-backend

plugins:
  - serverless-offline


stage: ${opt:stage, 'dev'}
region: 'us-east-1'
deploymentBucket:
name: cesta-basica-sp-estaticos
maxPreviousDeploymentArtifacts: 10 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
blockPublicAccess: false # Prevents public access via ACLs or bucket policies. Default is false
serverSideEncryption: AES256 # server-side encryption method

environmentVariables:
  DBPASSWORD: ${env:DBPASSWORD}
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  profile: profile-cesta-basica-aws
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::cesta-basica-sp"
  environment:
    DBURL: mongodb://cestaBasicaDocdbAdmin:${DBPASWORD}@cesta-basica-sp-documentdb.cluster-cuvqdex8zrqv.us-east-1.docdb.amazonaws.com:27017/?ssl=true&ssl_ca_certs=rds-combined-ca-bundle.pem&replicaSet=rs0&readPreference=secondaryPreferred&retryWrites=false

functions:
  concrete-cesta-basica-api:
    handler: dist/core/server.app
    description: registra o fluxo de entrega de cestas b√°sicas
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

deploymentPrefix: cesta-basia-api-serverless # The S3 prefix under which deployed artifacts should be stored. Default is serverless
role:
# app and org for use with dashboard.serverless.com
app: concrete-cesta-basica-sp
org: concrete

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
